user www-data;


# Determines whether nginx should become a daemon. Mainly used during development.
daemon off;

# This number should be, at maximum, the number of CPU cores on your system. 
# (since nginx doesn't benefit from more than one worker per CPU.)
worker_processes 1;


pid /run/nginx.pid;

 
events {

        # Determines how many clients will be served by each worker process.
        # (Max clients = worker_connections * worker_processes)
        # "Max clients" is also limited by the number of socket connections available on the system (~64k)
	worker_connections 4096;
	
        
        # Accept as many connections as possible, after nginx gets notification about a new connection.
        # May flood worker_connections, if that option is set too low.
        multi_accept on;

        # essential for linux, optmized to serve many clients with each thread
        use epoll;

}

http {

	##
	# Basic Settings
	##

        # Sendfile copies data between one FD and other from within the kernel. 
        # More efficient than read() + write(), since the requires transferring data to and from the user space.
	sendfile on;

        # Tcp_nopush causes nginx to attempt to send its HTTP response head in one packet, 
        # instead of using partial frames. This is useful for prepending headers before calling sendfile, 
        # or for throughput optimization.
	tcp_nopush on;
	
        # don't buffer data-sends (disable Nagle algorithm). Good for sending frequent small bursts of data in real time.
        tcp_nodelay on;


        # Timeout for keep-alive connections. Server will close connections after this time.
	keepalive_timeout 30;

	send_timeout 15;

        # allow the server to close the connection after a client stops responding. Frees up socket-associated memory.
        reset_timedout_connection on;

        # send the client a "request timed out" if the body is not loaded by this time. Default 60.
        client_body_timeout 15;

	# adding this variable to increase max upload file size
	client_max_body_size 150m;

	client_body_buffer_size 1m;
	client_header_timeout 15;

	types_hash_max_size 2048;
	
        server_tokens off;

        # Caches information about open FDs, freqently accessed files.
        # Changing this setting, in my environment, brought performance up from 560k req/sec, to 904k req/sec.
        # I recommend using some varient of these options, though not the specific values listed below.
        open_file_cache max=200000 inactive=20s;
        open_file_cache_valid 30s;
        open_file_cache_min_uses 2;
        open_file_cache_errors on;


	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# Logging Settings
	##

        log_format  main  '$remote_addr - $remote_user [$time_local] $status '
                          '"$request" $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for" ($request_time)';

        # Buffer log writes to speed up IO, or disable them altogether
	access_log /var/log/nginx/access.log main;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;
	gzip_http_version 1.1;
	gzip_disable "msie6";
	gzip_vary on;
	gzip_proxied any;
	gzip_comp_level 8;
	gzip_buffers 16 8k;
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# nginx-naxsi config
	##
	# Uncomment it if you installed nginx-naxsi
	##

	#include /etc/nginx/naxsi_core.rules;

	##
	# nginx-passenger config
	##
	# Uncomment it if you installed nginx-passenger
	##
	
	#passenger_root /usr;
	#passenger_ruby /usr/bin/ruby;

	##
	# Virtual Host Configs
	##

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}
